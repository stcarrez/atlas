dnl Autoconf configure script for atlas
dnl Process this file with autoconf to produce a configure script.
AC_INIT(src/atlas.ads)
AC_CANONICAL_SYSTEM
dnl AM_MAINTAINER_MODE
# Current release settings
ATLAS_MAJOR_VERSION=0
ATLAS_MINOR_VERSION=1
ATLAS_MICRO_VERSION=0
ATLAS_VERSION=$ATLAS_MAJOR_VERSION.$ATLAS_MINOR_VERSION.$ATLAS_MICRO_VERSION
# checking for local tools
AC_PROG_CC
AC_PROG_MAKE_SET
AC_PROG_INSTALL
AC_PROG_LN_S
AC_CHECK_PROGS(GNATMAKE, gnatmake, "")
# Set the version number of GtkAda
AC_SUBST(ATLAS_VERSION)
AC_SUBST(ATLAS_MAJOR_VERSION)
AC_SUBST(ATLAS_MINOR_VERSION)
AC_SUBST(ATLAS_MICRO_VERSION)
EXEC_PREFIX="$prefix"
AC_SUBST(EXEC_PREFIX)
ATLAS_LIBDIR="lib"
AC_SUBST(ATLAS_LIBDIR)
##########################################
# Ada Util library
##########################################
AC_MSG_CHECKING([Ada Util library (code.google.com/p/ada-util)])
AC_ARG_WITH(ada-util,
AS_HELP_STRING([--with-ada-util=x], [Path for the Ada Util library (code.google.com/p/ada-util)]),
[
  UTIL_DIR=${withval}/
],
[
  echo "with \"util\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    UTIL_DIR=
  else
    UTIL_DIR=../util/
  fi;
])
echo "with \"${UTIL_DIR}util\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Util Library not found in ${UTIL_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(${UTIL_DIR})
AC_SUBST(UTIL_DIR)
##########################################
# Ada Expression Language library
##########################################
AC_MSG_CHECKING([Ada Expression Language library (code.google.com/p/ada-el)])
AC_ARG_WITH(ada-el,
AS_HELP_STRING([--with-ada-el=x], [Path for the Ada Expression Language library (code.google.com/p/ada-el)]),
[
  EL_DIR=${withval}/
],
[
  echo "with \"el\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    EL_DIR=
  else
    EL_DIR=../el/
  fi;
  rm -f t.gpr
])
echo "with \"${EL_DIR}el\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Expression Language library not found in ${EL_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(${EL_DIR})
AC_SUBST(EL_DIR)
##########################################
# Ada Server Faces library
##########################################
AC_MSG_CHECKING([Ada Server Faces library (code.google.com/p/ada-asf)])
AC_ARG_WITH(ada-asf,
AS_HELP_STRING([--with-ada-asf=x], [Path for the Ada Server Faces library (code.google.com/p/ada-asf)]),
[
  ASF_DIR=${withval}/
],
[
  echo "with \"asf\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    ASF_DIR=
  else
    ASF_DIR=../asf/
  fi;
  rm -f t.gpr
])
echo "with \"${ASF_DIR}asf\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Server Faces library not found in ${ASF_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(${ASF_DIR})
AC_SUBST(ASF_DIR)
##########################################
# Ada Database Objects library
##########################################
AC_MSG_CHECKING([Ada Database Objects library (code.google.com/p/ada-ado)])
AC_ARG_WITH(ada-ado,
AS_HELP_STRING([--with-ada-ado=x], [Path for the Ada Database Objects library (code.google.com/p/ada-ado)]),
[
  ADO_DIR=${withval}/
],
[
  echo "with \"ado\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    ADO_DIR=
  else
    ADO_DIR=../ado/
  fi;
  rm -f t.gpr
])
echo "with \"${ADO_DIR}ado\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Database Objects library not found in ${ADO_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(${ADO_DIR})
AC_SUBST(ADO_DIR)
##########################################
# Ada Web Application library
##########################################
AC_MSG_CHECKING([Ada Web Application library (code.google.com/p/ada-awa)])
AC_ARG_WITH(ada-awa,
AS_HELP_STRING([--with-ada-awa=x], [Path for the Ada Web Application library (code.google.com/p/ada-awa)]),
[
  AWA_DIR=${withval}/
],
[
  echo "with \"awa\"; project t is for Source_Dirs use (); end t;" > t.gpr
  gnatmake -p -Pt >/dev/null 2>/dev/null
  if test $? -eq 0; then
    AWA_DIR=
  else
    AWA_DIR=../awa/
  fi;
])
echo "with \"${AWA_DIR}awa\"; project t is for Source_Dirs use (); end t;" > t.gpr
gnatmake -p -Pt >/dev/null 2>/dev/null
if test $? -ne 0 ; then
   rm -f t.gpr
   AC_MSG_ERROR([Ada Web Application not found in ${AWA_DIR}])
fi
rm -f t.gpr
AC_MSG_RESULT(${AWA_DIR})
AC_SUBST(AWA_DIR)
AC_OUTPUT(
Makefile atlas.gpr tests.gpr rules.mk
)
