-----------------------------------------------------------------------
--  Atlas.Reviews.Models -- Atlas.Reviews.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-spec.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2015 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
pragma Warnings (Off, "unit * is not referenced");
with ADO.Sessions;
with ADO.Objects;
with ADO.Statements;
with ADO.SQL;
with ADO.Schemas;
with ADO.Queries;
with ADO.Queries.Loaders;
with Ada.Calendar;
with Ada.Containers.Vectors;
with Ada.Strings.Unbounded;
with Util.Beans.Objects;
with Util.Beans.Basic.Lists;
with AWA.Users.Models;
with Util.Beans.Methods;
pragma Warnings (On, "unit * is not referenced");
package Atlas.Reviews.Models is
   type Review_Ref is new ADO.Objects.Object_Ref with null record;

   --  --------------------
   --  the table that contains the reviews made by users.
   --  --------------------
   --  Create an object key for Review.
   function Review_Key (Id : in ADO.Identifier) return ADO.Objects.Object_Key;
   --  Create an object key for Review from a string.
   --  Raises Constraint_Error if the string cannot be converted into the object key.
   function Review_Key (Id : in String) return ADO.Objects.Object_Key;

   Null_Review : constant Review_Ref;
   function "=" (Left, Right : Review_Ref'Class) return Boolean;

   --  Set the review identifier
   procedure Set_Id (Object : in out Review_Ref;
                     Value  : in ADO.Identifier);

   --  Get the review identifier
   function Get_Id (Object : in Review_Ref)
                 return ADO.Identifier;
   --
   function Get_Version (Object : in Review_Ref)
                 return Integer;

   --  Set the review title.
   procedure Set_Title (Object : in out Review_Ref;
                        Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Title (Object : in out Review_Ref;
                        Value : in String);

   --  Get the review title.
   function Get_Title (Object : in Review_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Title (Object : in Review_Ref)
                 return String;

   --  Set the review description
   procedure Set_Text (Object : in out Review_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Text (Object : in out Review_Ref;
                       Value : in String);

   --  Get the review description
   function Get_Text (Object : in Review_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Text (Object : in Review_Ref)
                 return String;

   --  Set the review creation date.
   procedure Set_Create_Date (Object : in out Review_Ref;
                              Value  : in Ada.Calendar.Time);

   --  Get the review creation date.
   function Get_Create_Date (Object : in Review_Ref)
                 return Ada.Calendar.Time;

   --  Set whether comments are allowed.
   procedure Set_Allow_Comments (Object : in out Review_Ref;
                                 Value  : in Integer);

   --  Get whether comments are allowed.
   function Get_Allow_Comments (Object : in Review_Ref)
                 return Integer;

   --  Set the site, article or application being reviewed.
   procedure Set_Site (Object : in out Review_Ref;
                       Value  : in Ada.Strings.Unbounded.Unbounded_String);
   procedure Set_Site (Object : in out Review_Ref;
                       Value : in String);

   --  Get the site, article or application being reviewed.
   function Get_Site (Object : in Review_Ref)
                 return Ada.Strings.Unbounded.Unbounded_String;
   function Get_Site (Object : in Review_Ref)
                 return String;

   --
   procedure Set_Reviewer (Object : in out Review_Ref;
                           Value  : in AWA.Users.Models.User_Ref'Class);

   --
   function Get_Reviewer (Object : in Review_Ref)
                 return AWA.Users.Models.User_Ref'Class;

   --  Load the entity identified by 'Id'.
   --  Raises the NOT_FOUND exception if it does not exist.
   procedure Load (Object  : in out Review_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier);

   --  Load the entity identified by 'Id'.
   --  Returns True in <b>Found</b> if the object was found and False if it does not exist.
   procedure Load (Object  : in out Review_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Id      : in ADO.Identifier;
                   Found   : out Boolean);

   --  Find and load the entity.
   overriding
   procedure Find (Object  : in out Review_Ref;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   --  Save the entity.  If the entity does not have an identifier, an identifier is allocated
   --  and it is inserted in the table.  Otherwise, only data fields which have been changed
   --  are updated.
   overriding
   procedure Save (Object  : in out Review_Ref;
                   Session : in out ADO.Sessions.Master_Session'Class);

   --  Delete the entity.
   overriding
   procedure Delete (Object  : in out Review_Ref;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   function Get_Value (From : in Review_Ref;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Table definition
   REVIEW_TABLE : constant ADO.Schemas.Class_Mapping_Access;

   --  Internal method to allocate the Object_Record instance
   overriding
   procedure Allocate (Object : in out Review_Ref);

   --  Copy of the object.
   procedure Copy (Object : in Review_Ref;
                   Into   : in out Review_Ref);

   package Review_Vectors is
      new Ada.Containers.Vectors (Index_Type   => Natural,
                                  Element_Type => Review_Ref,
                                  "="          => "=");
   subtype Review_Vector is Review_Vectors.Vector;

   procedure List (Object  : in out Review_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class);

   --  --------------------
   --    The list of reviews.
   --  --------------------
   type List_Info is
     new Util.Beans.Basic.Bean with  record

      --  the review identifier.
      Id : ADO.Identifier;

      --  the review title.
      Title : Ada.Strings.Unbounded.Unbounded_String;

      --  the review site.
      Site : Ada.Strings.Unbounded.Unbounded_String;

      --  the review date.
      Date : Ada.Calendar.Time;

      --  the whether comments are allowed.
      Allow_Comments : Boolean;

      --  the reviewer identifier.
      Reviewer_Id : ADO.Identifier;

      --  the reviewer name.
      Reviewer_Name : Ada.Strings.Unbounded.Unbounded_String;

      --  the reviewer email address.
      Reviewer_Email : Ada.Strings.Unbounded.Unbounded_String;

      --  the review text.
      Text : Ada.Strings.Unbounded.Unbounded_String;
   end record;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in List_Info;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out List_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);


   package List_Info_Beans is
      new Util.Beans.Basic.Lists (Element_Type => List_Info);
   package List_Info_Vectors renames List_Info_Beans.Vectors;
   subtype List_Info_List_Bean is List_Info_Beans.List_Bean;

   type List_Info_List_Bean_Access is access all List_Info_List_Bean;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out List_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   subtype List_Info_Vector is List_Info_Vectors.Vector;

   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   procedure List (Object  : in out List_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class);

   Query_List : constant ADO.Queries.Query_Definition_Access;


   --  --------------------
   --    create or update the review.
   --  --------------------
   type Review_Bean is abstract new Atlas.Reviews.Models.Review_Ref
     and Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with null record;


   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Review_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;


   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Review_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Save (Bean : in out Review_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   procedure Delete (Bean : in out Review_Bean;
                    Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   procedure Load (Bean : in out Review_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;

   type Review_List_Bean is abstract
     new Util.Beans.Basic.Bean and Util.Beans.Methods.Method_Bean with  record
      Page : Integer;
      Count : Integer;
      Page_Size : Integer;
   end record;

   --  This bean provides some methods that can be used in a Method_Expression.
   overriding
   function Get_Method_Bindings (From : in Review_List_Bean)
                                 return Util.Beans.Methods.Method_Binding_Array_Access;

   --  Get the bean attribute identified by the name.
   overriding
   function Get_Value (From : in Review_List_Bean;
                       Name : in String) return Util.Beans.Objects.Object;

   --  Set the bean attribute identified by the name.
   overriding
   procedure Set_Value (Item  : in out Review_List_Bean;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object);

   procedure Load (Bean : in out Review_List_Bean;
                  Outcome : in out Ada.Strings.Unbounded.Unbounded_String) is abstract;


private
   REVIEW_NAME : aliased constant String := "atlas_review";
   COL_0_1_NAME : aliased constant String := "id";
   COL_1_1_NAME : aliased constant String := "version";
   COL_2_1_NAME : aliased constant String := "title";
   COL_3_1_NAME : aliased constant String := "text";
   COL_4_1_NAME : aliased constant String := "create_date";
   COL_5_1_NAME : aliased constant String := "allow_comments";
   COL_6_1_NAME : aliased constant String := "site";
   COL_7_1_NAME : aliased constant String := "reviewer_id";

   REVIEW_DEF : aliased constant ADO.Schemas.Class_Mapping :=
     (Count => 8,
      Table => REVIEW_NAME'Access,
      Members => (
         1 => COL_0_1_NAME'Access,
         2 => COL_1_1_NAME'Access,
         3 => COL_2_1_NAME'Access,
         4 => COL_3_1_NAME'Access,
         5 => COL_4_1_NAME'Access,
         6 => COL_5_1_NAME'Access,
         7 => COL_6_1_NAME'Access,
         8 => COL_7_1_NAME'Access
)
     );
   REVIEW_TABLE : constant ADO.Schemas.Class_Mapping_Access
      := REVIEW_DEF'Access;

   Null_Review : constant Review_Ref
      := Review_Ref'(ADO.Objects.Object_Ref with others => <>);

   type Review_Impl is
      new ADO.Objects.Object_Record (Key_Type => ADO.Objects.KEY_INTEGER,
                                     Of_Class => REVIEW_DEF'Access)
   with record
       Version : Integer;
       Title : Ada.Strings.Unbounded.Unbounded_String;
       Text : Ada.Strings.Unbounded.Unbounded_String;
       Create_Date : Ada.Calendar.Time;
       Allow_Comments : Integer;
       Site : Ada.Strings.Unbounded.Unbounded_String;
       Reviewer : AWA.Users.Models.User_Ref;
   end record;

   type Review_Access is access all Review_Impl;

   overriding
   procedure Destroy (Object : access Review_Impl);

   overriding
   procedure Find (Object  : in out Review_Impl;
                   Session : in out ADO.Sessions.Session'Class;
                   Query   : in ADO.SQL.Query'Class;
                   Found   : out Boolean);

   overriding
   procedure Load (Object  : in out Review_Impl;
                   Session : in out ADO.Sessions.Session'Class);
   procedure Load (Object  : in out Review_Impl;
                   Stmt    : in out ADO.Statements.Query_Statement'Class;
                   Session : in out ADO.Sessions.Session'Class);

   overriding
   procedure Save (Object  : in out Review_Impl;
                   Session : in out ADO.Sessions.Master_Session'Class);

   procedure Create (Object  : in out Review_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   overriding
   procedure Delete (Object  : in out Review_Impl;
                     Session : in out ADO.Sessions.Master_Session'Class);

   procedure Set_Field (Object : in out Review_Ref'Class;
                        Impl   : out Review_Access);

   package File_1 is
      new ADO.Queries.Loaders.File (Path => "reviews-list.xml",
                                    Sha1 => "E5A97F945EDDB18ECD918CEED09A8EDFBAF90552");

   package Def_Listinfo_List is
      new ADO.Queries.Loaders.Query (Name => "list",
                                     File => File_1.File'Access);
   Query_List : constant ADO.Queries.Query_Definition_Access
   := Def_Listinfo_List.Query'Access;
end Atlas.Reviews.Models;
