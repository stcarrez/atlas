-----------------------------------------------------------------------
--  Atlas.Applications.Models -- Atlas.Applications.Models
-----------------------------------------------------------------------
--  File generated by ada-gen DO NOT MODIFY
--  Template used: templates/model/package-body.xhtml
--  Ada Generator: https://ada-gen.googlecode.com/svn/trunk Revision 1095
-----------------------------------------------------------------------
--  Copyright (C) 2015 Stephane Carrez
--  Written by Stephane Carrez (Stephane.Carrez@gmail.com)
--
--  Licensed under the Apache License, Version 2.0 (the "License");
--  you may not use this file except in compliance with the License.
--  You may obtain a copy of the License at
--
--      http://www.apache.org/licenses/LICENSE-2.0
--
--  Unless required by applicable law or agreed to in writing, software
--  distributed under the License is distributed on an "AS IS" BASIS,
--  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
--  See the License for the specific language governing permissions and
--  limitations under the License.
-----------------------------------------------------------------------
with Ada.Unchecked_Deallocation;
package body Atlas.Applications.Models is

   use type ADO.Objects.Object_Record_Access;
   use type ADO.Objects.Object_Ref;
   use type ADO.Objects.Object_Record;



   --  ------------------------------
   --  Get the bean attribute identified by the name.
   --  ------------------------------
   overriding
   function Get_Value (From : in User_Stat_Info;
                       Name : in String) return Util.Beans.Objects.Object is
   begin
      if Name = "post_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Post_Count));
      elsif Name = "document_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Document_Count));
      elsif Name = "question_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Question_Count));
      elsif Name = "answer_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Answer_Count));
      elsif Name = "review_count" then
         return Util.Beans.Objects.To_Object (Long_Long_Integer (From.Review_Count));
      end if;
      return Util.Beans.Objects.Null_Object;
   end Get_Value;


   --  ------------------------------
   --  Set the value identified by the name
   --  ------------------------------
   overriding
   procedure Set_Value (Item  : in out User_Stat_Info;
                        Name  : in String;
                        Value : in Util.Beans.Objects.Object) is
   begin
      if Name = "post_count" then
         Item.Post_Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "document_count" then
         Item.Document_Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "question_count" then
         Item.Question_Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "answer_count" then
         Item.Answer_Count := Util.Beans.Objects.To_Integer (Value);
      elsif Name = "review_count" then
         Item.Review_Count := Util.Beans.Objects.To_Integer (Value);
      end if;
   end Set_Value;


   --  --------------------
   --  Run the query controlled by <b>Context</b> and append the list in <b>Object</b>.
   --  --------------------
   procedure List (Object  : in out User_Stat_Info_List_Bean'Class;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
   begin
      List (Object.List, Session, Context);
   end List;

   --  --------------------
   --  Stats about what the user did.
   --  --------------------
   procedure List (Object  : in out User_Stat_Info_Vector;
                   Session : in out ADO.Sessions.Session'Class;
                   Context : in out ADO.Queries.Context'Class) is
      procedure Read (Into : in out User_Stat_Info);

      Stmt : ADO.Statements.Query_Statement
          := Session.Create_Statement (Context);
      Pos  : Natural := 0;
      procedure Read (Into : in out User_Stat_Info) is
      begin
         Into.Post_Count := Stmt.Get_Integer (0);
         Into.Document_Count := Stmt.Get_Integer (1);
         Into.Question_Count := Stmt.Get_Integer (2);
         Into.Answer_Count := Stmt.Get_Integer (3);
         Into.Review_Count := Stmt.Get_Integer (4);
      end Read;
   begin
      Stmt.Execute;
      User_Stat_Info_Vectors.Clear (Object);
      while Stmt.Has_Elements loop
         Object.Insert_Space (Before => Pos);
         Object.Update_Element (Index => Pos, Process => Read'Access);
         Pos := Pos + 1;
         Stmt.Next;
      end loop;
   end List;



end Atlas.Applications.Models;
